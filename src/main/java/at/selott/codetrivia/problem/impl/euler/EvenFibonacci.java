package at.selott.codetrivia.problem.impl.euler;

import at.selott.codetrivia.problem.Problem;
import at.selott.codetrivia.problem.impl.util.FibonacciSupplier;

import java.util.stream.LongStream;

/*
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/


public class EvenFibonacci implements Problem<Long> {
    @Override
    public Long solve() {
        // Trial and error resulted in 33 being the biggest number below 4_000_000
        LongStream fibonacciStream = LongStream.generate(new FibonacciSupplier());
        return fibonacciStream.limit(33).filter(n -> n %2 == 0).sum();
    }

    @Override
    public void displaySolution() {
        System.out.println("Sum of even fibonacci numbers below 4_000_000 -> " + solve());
    }
}
